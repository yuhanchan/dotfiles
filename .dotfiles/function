function removeppa(){
    sudo add-apt-repository --remove ppa:$1
}

function avgtime(){
    if [[ $# -lt 2 ]]; then
        echo "Usage: avgtime [num_iter] [cmd]"
        return 
    fi
	number=$1
	for i in `seq $number`; do
		$2
	done
}
    
function dotupdate(){
    sudo cp -r -f $HOME/.dotfiles/. $HOME/Misc/dotfiles/.dotfiles/
    # sudo cp -r -f $HOME/.oh-my-zsh/. $HOME/Misc/dotfiles/.oh-my-zsh/
    sudo cp -f $HOME/.commonrc $HOME/Misc/dotfiles/.commonrc
    sudo cp -f $HOME/.bashrc $HOME/Misc/dotfiles/.bashrc
    sudo cp -f $HOME/.zshrc $HOME/Misc/dotfiles/.zshrc
    sudo cp -r -f $HOME/.vim/. $HOME/Misc/dotfiles/.vim/
    sudo cp -f $HOME/.vimrc $HOME/Misc/dotfiles/.vimrc
    git -C $HOME/Misc/dotfiles add .
    git -C $HOME/Misc/dotfiles commit -m "update"
    git -C $HOME/Misc/dotfiles push

}

function awsset() {
    local Tag=${1:?Usage: awsset [Tag]}
    local DnsName
    # query aws info
    local output=$(aws ec2 describe-instances --query 'Reservations[].Instances[].{InstanceId:InstanceId,State:State.Name,DnsName:NetworkInterfaces[0].Association.PublicDnsName,Tag:Tags[?Key==`Name`] | [0].Value}' --output json)
    
    # get DnsName by Tag
    for i in `seq 0 $(echo $output | jq 'length')`; do
        # echo $output | jq ".[$i].InstanceId"
        # echo $output | jq ".[$i].State"
        # echo $output | jq ".[$i].DnsName"
        local curTag=`echo $output | jq ".[$i].Tag"`
        curTag=${curTag//\"/}
        if [[ $curTag == $Tag ]]; then
            DnsName=`echo $output | jq ".[$i].DnsName"`
            DnsName=${DnsName//\"/}
            break
        fi
    done
    
	if [[ -z $DnsName ]]; then
		echo "Tag $Tag Not Found"
		return 0
	fi
    export awsDnsName=$DnsName
    echo awsDnsName set to $DnsName
}
